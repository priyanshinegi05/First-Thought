generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                String         @id @default(cuid())
  username          String         @unique
  password          String
  bio               String?
  avatar            String?
  fullName          String
  email             String         @unique
  topicsOfInterest  String         @default("[]")
  comments          Comment[]
  likes             Like[]
  sentNotifications Notification[] @relation("FromUserNotifications")
  notifications     Notification[] @relation("UserNotifications")
  posts             Post[]
  savedPosts        SavedPost[]
}

model Post {
  id            String         @id @default(cuid())
  title         String
  content       String
  preview       String
  likesNumber   Int            @default(0)
  postImg       String?
  tags          String         @default("[]")
  authorId      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  author        User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  savedPosts    SavedPost[]
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  postId    String
  authorId  String
  updatedAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Like {
  id     Int    @id @default(autoincrement())
  postId String
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "likeId")
}

model SavedPost {
  id      String   @id @default(cuid())
  postId  String
  userId  String
  savedAt DateTime @default(now())
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post    Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, userId], name: "savedPostId")
}

model Notification {
  id         String   @id @default(cuid())
  type       String
  message    String
  isRead     Boolean  @default(false)
  userId     String
  postId     String?
  fromUserId String?
  createdAt  DateTime @default(now())
  fromUser   User?    @relation("FromUserNotifications", fields: [fromUserId], references: [id], onDelete: Cascade)
  post       Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  user       User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model NewsletterSubscription {
  id        String   @id @default(cuid())
  email     String   @unique
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
